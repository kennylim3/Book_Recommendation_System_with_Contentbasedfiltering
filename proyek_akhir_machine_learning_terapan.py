# -*- coding: utf-8 -*-
"""Proyek Akhir Machine Learning Terapan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16wD_GShO3Byesm0aWEdpiG8RTZRVFyx4

##Proyek Akhir Machine Learning Terapan: Sistem Rekomendasi Buku

###Menyiapkan Library yang Dibutuhkan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""###Menyiapkan Dataset"""

!pip install -q kaggle

!mkdir ~/.kaggle

!cp kaggle.json ~/.kaggle

!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d 'jalota/books-dataset'

!unzip /content/books-dataset.zip

book_df = pd.read_csv('Book_Dataset_1.csv')

"""###Data Understanding"""

book_df

first_column = book_df.columns[0]
book_df = book_df.rename(columns={first_column : 'book_id'})
book_df

print('Jumlah data buku: ', len(book_df.book_id.unique()))

book_df.info()

book_df.describe()

print('Banyak kategori buku: ', len(book_df.Category.unique()))

plt.figure(figsize=(10, 15))
sns.countplot(data=book_df, y='Category')
plt.title('Count of Books by Category')
plt.xlabel('Count')
plt.ylabel('Category')
plt.show()

"""###Data Preparation"""

book_df.isnull().sum()

book_df = book_df.drop_duplicates()

book_id = book_df['book_id'].tolist()
book_title = book_df['Title'].tolist()
book_category = book_df['Category'].tolist()

print(len(book_id))
print(len(book_title))
print(len(book_category))

book_new = pd.DataFrame({
    'id': book_id,
    'title': book_title,
    'category': book_category
})
book_new

"""###Modeling and Result: Content-Based Filtering"""

data = book_new

tf = TfidfVectorizer()

tf.fit(data['category'])

tf.get_feature_names_out()

tfidf_matrix = tf.fit_transform(data['category'])

tfidf_matrix.shape

tfidf_matrix.todense()

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.title
).sample(22, axis=1).sample(10, axis=0)

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

cosine_sim_df = pd.DataFrame(cosine_sim, index=data['title'], columns=data['title'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

def book_recommendations(nama_buku, similarity_data=cosine_sim_df, items=data[['title', 'category']], k=10):
    """
    Rekomendasi Resto berdasarkan kemiripan dataframe

    Parameter:
    ---
    nama_resto : tipe data string (str)
                Nama Restoran (index kemiripan dataframe)
    similarity_data : tipe data pd.DataFrame (object)
                      Kesamaan dataframe, simetrik, dengan resto sebagai
                      indeks dan kolom
    items : tipe data pd.DataFrame (object)
            Mengandung kedua nama dan fitur lainnya yang digunakan untuk mendefinisikan kemiripan
    k : tipe data integer (int)
        Banyaknya jumlah rekomendasi yang diberikan
    ---


    Pada index ini, kita mengambil k dengan nilai similarity terbesar
    pada index matrix yang diberikan (i).
    """


    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,nama_buku].to_numpy().argpartition(
        range(-1, -k, -1))

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop nama_resto agar nama resto yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama_buku, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

# Mendapatkan rekomendasi buku
book_recommendations("1st to Die (Women's Murder Club #1)")

"""###Evaluation"""

book_recommendations('Tipping the Velvet')

"""Evaluasi model dilakukan menggunakan metric Recommender System Precision. Nilai precision didapatkan dengan membandingkan jumlah rekomendasi yang relevan dengan total items yang direkomendasikan.
Pada percobaan permintaan top 10 rekomendasi, didapati bahwa semuanya relevan dengan kategori dari buku yang di-input. Oleh karena itu, Sistem rekomendasi buku dengan content-based filtering yang telah dibuat memiliki precision sebesar 100%
"""